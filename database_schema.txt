-- This schema is designed for a PostgreSQL database, like the one provided by Supabase.
-- It has been made idempotent, meaning it can be run multiple times without causing errors.

-------------------------------------------
--              TABLES                   --
-------------------------------------------

-- Employees table (no changes)
CREATE TABLE IF NOT EXISTS employees (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id varchar(50) NOT NULL UNIQUE,
  full_name_ar varchar(255) NOT NULL,
  full_name_en varchar(255),
  job_title varchar(255) NOT NULL,
  department varchar(255) NOT NULL,
  center varchar(255),
  phone_direct varchar(50),
  email varchar(255),
  national_id varchar(50),
  nationality varchar(100),
  gender varchar(20),
  date_of_birth date,
  classification_id varchar(50),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Office contacts table (no changes)
CREATE TABLE IF NOT EXISTS office_contacts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(255) NOT NULL UNIQUE,
  extension varchar(20) NOT NULL,
  location varchar(255),
  email varchar(255),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Tasks table (no changes)
CREATE TABLE IF NOT EXISTS tasks (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  description text,
  due_date date,
  is_completed boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Transactions table (no changes)
CREATE TABLE IF NOT EXISTS transactions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  transaction_number text NOT NULL UNIQUE,
  subject text NOT NULL,
  type text NOT NULL, -- 'incoming' or 'outgoing'
  platform text NOT NULL, -- 'Bain', 'MinisterEmail', 'HospitalEmail'
  status text NOT NULL, -- 'new', 'inProgress', 'followedUp', 'completed'
  date date NOT NULL,
  description text,
  attachment jsonb, -- To store { name, type, data }
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-------------------------------------------
--         NEW RBAC TABLES             --
-------------------------------------------

-- Roles table
CREATE TABLE IF NOT EXISTS roles (
  role_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_name varchar(50) NOT NULL UNIQUE,
  description text
);

-- Users table
CREATE TABLE IF NOT EXISTS users (
  user_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username varchar(50) NOT NULL UNIQUE,
  password text NOT NULL, -- In a real app, this should be a hashed password
  full_name varchar(100) NOT NULL,
  role_id bigint NOT NULL REFERENCES roles(role_id),
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Permissions table
CREATE TABLE IF NOT EXISTS permissions (
  permission_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  permission_name varchar(100) NOT NULL UNIQUE, -- e.g., 'manage_users', 'edit_employees'
  description text
);

-- Role_Permissions junction table
CREATE TABLE IF NOT EXISTS role_permissions (
  role_id bigint NOT NULL REFERENCES roles(role_id) ON DELETE CASCADE,
  permission_id bigint NOT NULL REFERENCES permissions(permission_id) ON DELETE CASCADE,
  PRIMARY KEY (role_id, permission_id)
);

-- Audit Log table
CREATE TABLE IF NOT EXISTS audit_log (
  log_id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id bigint REFERENCES users(user_id),
  action text NOT NULL,
  timestamp timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


-------------------------------------------
--        ROW LEVEL SECURITY (RLS)       --
-------------------------------------------
-- Enable RLS for all tables.
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE office_contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE roles ENABLE ROW LEVEL SECURITY;
ALTER TABLE permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE role_permissions ENABLE ROW LEVEL SECURITY;
ALTER TABLE audit_log ENABLE ROW LEVEL SECURITY;

-- Create policies for PUBLIC access (for this demo app).
-- In a real multi-tenant app, you would use auth.uid() to restrict access.
DROP POLICY IF EXISTS "Enable public access" ON employees;
CREATE POLICY "Enable public access" ON employees FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON office_contacts;
CREATE POLICY "Enable public access" ON office_contacts FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON tasks;
CREATE POLICY "Enable public access" ON tasks FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON transactions;
CREATE POLICY "Enable public access" ON transactions FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON users;
CREATE POLICY "Enable public access" ON users FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON roles;
CREATE POLICY "Enable public access" ON roles FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON permissions;
CREATE POLICY "Enable public access" ON permissions FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON role_permissions;
CREATE POLICY "Enable public access" ON role_permissions FOR ALL USING (true);

DROP POLICY IF EXISTS "Enable public access" ON audit_log;
CREATE POLICY "Enable public access" ON audit_log FOR ALL USING (true);


-------------------------------------------
--           SEEDING DATA                --
-------------------------------------------
-- Seed roles, permissions, and a default admin user.
-- This section will only insert data if the tables are empty.

DO $$
BEGIN
  -- 1. Seed Roles
  IF NOT EXISTS (SELECT 1 FROM roles) THEN
    INSERT INTO roles (role_name, description) VALUES
    ('Admin', 'Administrator with full system access'),
    ('HR_Manager', 'Human Resources Manager with access to manage employees and contacts'),
    ('User', 'Regular user with view access and ability to add personal items');
  END IF;

  -- 2. Seed Permissions
  IF NOT EXISTS (SELECT 1 FROM permissions) THEN
    INSERT INTO permissions (permission_name, description) VALUES
    ('manage_users', 'Can add, edit, and deactivate users'),
    ('edit_employees', 'Can add and edit employee records'),
    ('delete_employees', 'Can delete employee records'),
    ('import_export_employees', 'Can import and export employee data'),
    ('edit_contacts', 'Can add and edit office contacts'),
    ('delete_contacts', 'Can delete office contacts'),
    ('import_export_contacts', 'Can import and export office contacts'),
    ('edit_tasks', 'Can edit any task'),
    ('delete_tasks', 'Can delete any task'),
    ('edit_transactions', 'Can edit any transaction'),
    ('delete_transactions', 'Can delete any transaction'),
    ('add_task', 'Can add a new task'),
    ('add_transaction', 'Can add a new transaction');
  END IF;

  -- 3. Seed Role_Permissions
  IF NOT EXISTS (SELECT 1 FROM role_permissions) THEN
    -- Admin permissions (all)
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT r.role_id, p.permission_id
    FROM roles r, permissions p
    WHERE r.role_name = 'Admin';

    -- HR_Manager permissions
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT (SELECT role_id FROM roles WHERE role_name = 'HR_Manager'), p.permission_id
    FROM permissions p
    WHERE p.permission_name IN (
      'edit_employees', 'delete_employees', 'import_export_employees',
      'edit_contacts', 'delete_contacts', 'import_export_contacts',
      'add_task', 'add_transaction'
    );

    -- User permissions
    INSERT INTO role_permissions (role_id, permission_id)
    SELECT (SELECT role_id FROM roles WHERE role_name = 'User'), p.permission_id
    FROM permissions p
    WHERE p.permission_name IN ('add_task', 'add_transaction');
  END IF;

  -- 4. Seed default Admin User
  IF NOT EXISTS (SELECT 1 FROM users) THEN
    INSERT INTO users (username, password, full_name, role_id)
    SELECT 'admin', '1234', 'Admin User', r.role_id FROM roles r WHERE r.role_name = 'Admin';
  END IF;

END;
$$;
