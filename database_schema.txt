-- This schema is designed for a PostgreSQL database, like the one provided by Supabase.
-- It has been made idempotent, meaning it can be run multiple times without causing errors.

-------------------------------------------
--              TABLES                   --
-------------------------------------------

-- Employees table
-- Stores all employee information.
CREATE TABLE IF NOT EXISTS employees (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id varchar(50) NOT NULL,
  full_name_ar varchar(255) NOT NULL,
  full_name_en varchar(255),
  job_title varchar(255) NOT NULL,
  department varchar(255) NOT NULL,
  center varchar(255),
  phone_direct varchar(50),
  email varchar(255),
  national_id varchar(50),
  nationality varchar(100),
  gender varchar(20),
  date_of_birth date,
  classification_id varchar(50),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Office contacts table
-- Stores contact information for various offices/departments.
CREATE TABLE IF NOT EXISTS office_contacts (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar(255) NOT NULL,
  extension varchar(20) NOT NULL,
  location varchar(255),
  email varchar(255),
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Employee favorites table
-- Stores which employees are marked as favorites.
CREATE TABLE IF NOT EXISTS employee_favorites (
  employee_id bigint NOT NULL,
  PRIMARY KEY (employee_id)
);

-- Tasks table
-- Stores tasks and reminders.
CREATE TABLE IF NOT EXISTS tasks (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  title text NOT NULL,
  description text,
  due_date date,
  is_completed boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Transactions table
-- Stores incoming and outgoing transactions/correspondence.
CREATE TABLE IF NOT EXISTS transactions (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  transaction_number text NOT NULL,
  subject text NOT NULL,
  type text NOT NULL, -- 'incoming' or 'outgoing'
  platform text NOT NULL, -- 'Bain', 'MinisterEmail', 'HospitalEmail'
  status text NOT NULL, -- 'new', 'inProgress', 'followedUp', 'completed'
  date date NOT NULL,
  description text,
  attachment jsonb, -- To store { name, type, data }
  created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


-------------------------------------------
--           CONSTRAINTS & INDEXES       --
-------------------------------------------
-- We add constraints and indexes separately to avoid errors if they already exist.

-- Add email column to office_contacts if it doesn't exist. This ensures backward compatibility.
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'office_contacts' AND column_name = 'email'
    ) THEN
        ALTER TABLE office_contacts ADD COLUMN email varchar(255);
    END IF;
END;
$$;

DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'employees_employee_id_key') THEN
        ALTER TABLE employees ADD CONSTRAINT employees_employee_id_key UNIQUE (employee_id);
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'office_contacts_name_key') THEN
        ALTER TABLE office_contacts ADD CONSTRAINT office_contacts_name_key UNIQUE (name);
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'tasks_title_key') THEN
        ALTER TABLE tasks ADD CONSTRAINT tasks_title_key UNIQUE (title);
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'transactions_transaction_number_key') THEN
        ALTER TABLE transactions ADD CONSTRAINT transactions_transaction_number_key UNIQUE (transaction_number);
    END IF;
    
    -- Foreign Key for favorites
    IF NOT EXISTS (SELECT 1 FROM pg_constraint WHERE conname = 'employee_favorites_employee_id_fkey') THEN
        ALTER TABLE employee_favorites ADD CONSTRAINT employee_favorites_employee_id_fkey 
        FOREIGN KEY (employee_id) REFERENCES employees(id) ON DELETE CASCADE;
    END IF;
END;
$$;

-- Create indexes if they don't exist
CREATE INDEX IF NOT EXISTS idx_employees_full_name_ar ON employees(full_name_ar);
CREATE INDEX IF NOT EXISTS idx_employees_department ON employees(department);


-------------------------------------------
--        ROW LEVEL SECURITY (RLS)       --
-------------------------------------------
-- Enable RLS for all tables.
ALTER TABLE employees ENABLE ROW LEVEL SECURITY;
ALTER TABLE office_contacts ENABLE ROW LEVEL SECURITY;
ALTER TABLE employee_favorites ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE transactions ENABLE ROW LEVEL SECURITY;

-- Create policies for PUBLIC access.
-- DROP and CREATE ensures the policy is always up-to-date with the schema file.

-- Policies for 'employees' table
DROP POLICY IF EXISTS "Enable public read access" ON employees;
CREATE POLICY "Enable public read access" ON employees FOR SELECT USING (true);
DROP POLICY IF EXISTS "Enable all actions for public" ON employees;
CREATE POLICY "Enable all actions for public" ON employees FOR ALL USING (true);

-- Policies for 'office_contacts' table
DROP POLICY IF EXISTS "Enable public read access" ON office_contacts;
CREATE POLICY "Enable public read access" ON office_contacts FOR SELECT USING (true);
DROP POLICY IF EXISTS "Enable all actions for public" ON office_contacts;
CREATE POLICY "Enable all actions for public" ON office_contacts FOR ALL USING (true);

-- Policies for 'employee_favorites' table
DROP POLICY IF EXISTS "Enable public read access" ON employee_favorites;
CREATE POLICY "Enable public read access" ON employee_favorites FOR SELECT USING (true);
DROP POLICY IF EXISTS "Enable all actions for public" ON employee_favorites;
CREATE POLICY "Enable all actions for public" ON employee_favorites FOR ALL USING (true);

-- Policies for 'tasks' table
DROP POLICY IF EXISTS "Enable public read access" ON tasks;
CREATE POLICY "Enable public read access" ON tasks FOR SELECT USING (true);
DROP POLICY IF EXISTS "Enable all actions for public" ON tasks;
CREATE POLICY "Enable all actions for public" ON tasks FOR ALL USING (true);

-- Policies for 'transactions' table
DROP POLICY IF EXISTS "Enable public read access" ON transactions;
CREATE POLICY "Enable public read access" ON transactions FOR SELECT USING (true);
DROP POLICY IF EXISTS "Enable all actions for public" ON transactions;
CREATE POLICY "Enable all actions for public" ON transactions FOR ALL USING (true);